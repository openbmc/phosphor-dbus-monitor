{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "887f8932_74d1e24f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2022-01-10T11:40:52Z",
      "side": 1,
      "message": "Hello,\nA question to those who actually uses phosphor-snmp functionality: what are your typical usecases and why the MIB currently is so rudimentary? Many log messages are essentialy C++ exception type names, without any details, how is this useful for SNMP monitoring in real life?",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21321ae2_4a4e3ed9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-01-11T06:34:05Z",
      "side": 1,
      "message": "what is MIB?",
      "parentUuid": "887f8932_74d1e24f",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c627b45_5f4fb43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-01-11T06:35:07Z",
      "side": 1,
      "message": "can you change back to WorkInProgress I somehow overwritten it?",
      "parentUuid": "21321ae2_4a4e3ed9",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ef936d5_ec5cde9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2022-01-13T09:44:23Z",
      "side": 1,
      "message": "MIB is a machine-readable description of information and its structure for interaction with particular equipment using SNMP. For OpenBMC see https://github.com/openbmc/phosphor-snmp/blob/master/mibs/NotificationMIB.txt . I think this change is ready for review other than needing the sdbusplus change I sent separately.",
      "parentUuid": "1c627b45_5f4fb43c",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a3319b0_4b8f5b47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-01-16T14:03:04Z",
      "side": 1,
      "message": "some output data in the tested section would have been useful.",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03d5f99c_c6748b32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-01-16T14:19:33Z",
      "side": 1,
      "message": "CI is failued due to clang check, do this on your files and pus again.\n\nclang-format-12 -i \u003cfile name\u003e\n\ndo check here for the error message https://jenkins.openbmc.org/job/ci-repository/35165/console",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffca381a_18959280",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2022-01-16T14:34:11Z",
      "side": 1,
      "message": "Hello MARRI,\n\nThank you for the review. Where exactly should I add output data to?\n\nI\u0027ll do that and fix the CI failure in the next version (will push after the merge_variants_t sdbusplus change is merged).\n\nCan someone who actually uses SNMP traps tell where exactly you\u0027re getting them from? Can you please add someone to Reviewers or Cc to clarify this? For my testing I added a hack to phosphor-sel-logger to get at least something remotely useful:\n\n diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp\n index 8368f3b9e8e5..b725a96d2e89 100755\n --- a/src/sel_logger.cpp\n +++ b/src/sel_logger.cpp\n @@ -157,7 +157,7 @@ static uint16_t\n      /*auto entryID \u003d */report\u003cSELCreated\u003e(\n          Created::RECORD_TYPE(selSystemType), Created::GENERATOR_ID(genId),\n          Created::SENSOR_DATA(selDataStr.c_str()), Created::EVENT_DIR(assert),\n -        Created::SENSOR_PATH(path.c_str()));\n +        Created::SENSOR_PATH((path + \" MSG\u003d\\\"\" + message + \"\\\"\").c_str()));\n      //return static_cast\u003cuint16_t\u003e(entryID);\n  \n      unsigned int recordId \u003d getNewRecordId();\n @@ -187,7 +187,7 @@ static uint16_t selAddOemRecord(const std::string\u0026 message,\n      /*auto entryID \u003d */report\u003cSELCreated\u003e(\n          Created::RECORD_TYPE(recordType), Created::GENERATOR_ID(0),\n          Created::SENSOR_DATA(selDataStr.c_str()), Created::EVENT_DIR(0),\n -        Created::SENSOR_PATH(\"\"));\n +        Created::SENSOR_PATH((\" MSG\u003d\\\"\" + message + \"\\\"\").c_str()));\n      //return static_cast\u003cuint16_t\u003e(entryID);",
      "parentUuid": "1a3319b0_4b8f5b47",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9efbe69_8101c838",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2022-01-17T13:24:41Z",
      "side": 1,
      "message": "As per my understanding SNMP traps are send from phosphor-dbus-monitor when and error log object entry is created. you can do that by hacking in some application just to create an error and commit\n\nhttp://fstone07p1.aus.stglabs.ibm.com:8080/source/xref/openbmc/phosphor-hwmon/fan_pwm.cpp?r\u003d6a391de4#35\n\nhere an writefailure error is created and committed, we can fake this in some small app/service and restart it, you can create different error with different data and see how SNMP is getting it.",
      "parentUuid": "ffca381a_18959280",
      "revId": "ef6664dcce7091c0e12e0bec5c6bd60d33f8398e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}